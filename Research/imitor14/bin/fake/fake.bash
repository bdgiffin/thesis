#! /bin/bash
#
#=======================================================================
#
# Â© 2010-2013 Andrew Baldwin
# This file is part of fake [version 5.40].
# fake is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
# fake is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# You should have received a copy of the GNU General Public License
# along with fake.  If not, see <http://www.gnu.org/licenses/>.
#
#=======================================================================
#
# STOP! Do NOT Edit Below!
#
# The file example.bash (or a copy) should edited instead (see fake.txt
# for a detailed explanation).
#
#=======================================================================
#
# Fortran Makefile (fake) Generation Script 5.40
#
#-----------------------------------------------------------------------
#
  INC_DIR=`dirname "${BASH_SOURCE}"`
  INC_DIR=`sed -e 's/ /\\\\ /g' <<< "${INC_DIR}"`
#
  . ${INC_DIR}/fake-color.bash
#
#-----------------------------------------------------------------------
#
# Fix spaces in path names.
#
  BASH_DIR=`sed -e 's/ /\\\\ /g' <<< "${BASH_DIR}"`
  MAKE_DIR=`sed -e 's/ /\\\\ /g' <<< "${MAKE_DIR}"`
  WRK_DIRS=`sed -e 's/ /\\\\ /g' <<< "${WRK_DIRS}"`
#
  echo "# Generated by fake [version 5.40]" > ${MAKE_DIR}/Makefile
  echo >> ${MAKE_DIR}/Makefile
#
# Include WRK_DIRS when finding .mod and .H files.
#
  if [ "${WRK_DIRS}" != "" ]; then
    if [ "${CFLAGS}" != "" ]; then
      CFLAGS=`sed -e 's/\:/ -I/g' <<< "${CFLAGS} -I${WRK_DIRS}"`
    else
      CFLAGS=`sed -e 's/\:/ -I/g' <<< "-I${WRK_DIRS}"`
    fi
#
    if [ "${FFLAGS}" != "" ]; then
      FFLAGS=`sed -e 's/\:/ -I/g' <<< "${FFLAGS} -I${WRK_DIRS}"`
    else
      FFLAGS=`sed -e 's/\:/ -I/g' <<< "-I${WRK_DIRS}"`
    fi
  fi
#
# Create vpath(s).
#
  echo >> ${MAKE_DIR}/Makefile
#
  echo "BASH_DIR := ${BASH_DIR}"  >> ${MAKE_DIR}/Makefile
  echo "PWD := \$(shell pwd)"  >> ${MAKE_DIR}/Makefile
  echo "ROOT_DIR := ${ROOT_DIR}"  >> ${MAKE_DIR}/Makefile
#
  echo >> ${MAKE_DIR}/Makefile
  echo "vpath %.mod ${WRK_DIRS}" >> ${MAKE_DIR}/Makefile
  echo "vpath %.H ${WRK_DIRS}" >> ${MAKE_DIR}/Makefile
#
  echo >> ${MAKE_DIR}/Makefile
  echo >> ${MAKE_DIR}/Makefile
#
# Convert WRK_DIRS for use with find and for loop(s).
#
  WRK_DIRS=`sed -e 's/\/*\:/ /g' <<< "${WRK_DIRS}"`
#
# Create linking ruleset.
#
  if [ "${VER}" == "y" ]; then
    echo -n "fake: Adding executable to the Makefile..."
  fi
#
  XUSES=""
  DIR_XUSES=""
  XOK="true"
  for SRC in ${SRCS[@]}; do
    FND_SRC=`awk -F '/' '{ if (NF > 1) { printf("-wholename %s", $1); for (i = 2; i <= NF; ++i) { printf("/%s", $i); } } else { printf("-name %s", $1); } }' <<< "${SRC}"`
    DIR_SRC=`find ${WRK_DIRS} -maxdepth 1 ${FND_SRC}`
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    if [ "${DIR_SRC}" == "" ]; then
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      if [ "${VER}" == "y" -a "${XOK}" == "true" ]; then
        echo
      fi

      if [ "${COLOR}" != "on" ]; then
        echo -n "fake" 1>&2
      else
        echo -n -e "${ERROR_COLOR}fake${ECHO_DEFAULT_COLOR}" 1>&2
      fi
      echo ": File ${SRC} was not found [searched: ${WRK_DIRS}]." 1>&2
      XOK="false"
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    else
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      CHKFND=`sed 's/[^$]//g' <<< "${DIR_SRC}" | wc -m`
      if [ $CHKFND -gt 1 ]; then
        if [ "${VER}" == "y" -a "${XOK}" == "true" ]; then
          echo
        fi

        if [ "${COLOR}" != "on" ]; then
          echo -n "fake" 1>&2
        else
          echo -n -e "${ERROR_COLOR}fake${ECHO_DEFAULT_COLOR}" 1>&2
        fi
        echo ": More than one file named ${SRC} was found [`sed 's/\n/ /g' <<< ${DIR_SRC}`]." 1>&2
        XOK="false"
      else
        EXT=`awk -F '.' '{ printf("%s", tolower($NF)); }' <<< "${DIR_SRC}"`
        if [ "${EXT}" != "comp" -a "${EXT}" != "frag" -a "${EXT}" != "geom" -a "${EXT}" != "shdr" -a "${EXT}" != "tesc" -a "${EXT}" != "tese" -a "${EXT}" != "vert" ]; then
          XUSES="`awk -F '.' '{ printf("%s", $1); for (i = 2; i < NF; ++i) { printf(".%s", $i); } printf(".o"); }' <<< "${SRC}"` ${XUSES}"
          DIR_XUSES="`awk -F '.' '{ printf("%s", $1); for (i = 2; i < NF; ++i) { printf(".%s", $i); } printf(".o"); }' <<< "${DIR_SRC}"` ${DIR_XUSES}"
        fi
      fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  done
  if [ "${XOK}" == "false" ]; then
    if [ "${COLOR}" != "on" ]; then
      echo -n "fake" 1>&2
    else
      echo -n -e "${ERROR_COLOR}fake${ECHO_DEFAULT_COLOR}" 1>&2
    fi
    echo ": Cannot generate Makefile." 1>&2
    rm -f ${MAKE_DIR}/Makefile

    exit 1
  fi
  XUSES=${XUSES/% }
  DIR_XUSES=${DIR_XUSES/% }
#
# Add linking compilation.
#
  echo "${XNAME}: ${DIR_XUSES}" >> ${MAKE_DIR}/Makefile
#
  LINE="	@ \$(BASH_DIR)/al.bash \"${XNAME}\" \"${XC} ${DIR_XUSES} -o ${XNAME}"
  if [ "${XFLAGS}" != "" ]; then
    LINE="${LINE} ${XFLAGS}"
  fi
  echo "${LINE}\"">> ${MAKE_DIR}/Makefile
#
  echo >> ${MAKE_DIR}/Makefile
#
  if [ "${VER}" == "y" ]; then
    echo -e "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\bed executable to the Makefile.   "
  fi
#
# Creating compiling rulesets.
#
  if [ "${VER}" == "y" ]; then
    NSRC=0
    echo -n "fake: Added ${NSRC} source files to the Makefile..."
  fi
#
  PHONY_MODS=""
  CLN_HDR=""
#
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  for SRC in ${SRCS[@]}; do
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    FND_SRC=`awk -F '/' '{ if (NF > 1) { printf("-wholename %s", $1); for (i = 2; i <= NF; ++i) { printf("/%s", $i); } } else { printf("-name %s", $1); } }' <<< "${SRC}"`
    SRC=`awk -F '/' '{ print $NF; }' <<< "${SRC}"`
    OBJ=`awk -F '.' '{ printf("%s", $1); for (i = 2; i < NF; ++i) { printf(".%s", $i); } printf(".o"); }' <<< "${SRC}"`
    EXT=`awk -F '.' '{ printf("%s", tolower($NF)); }' <<< "${SRC}"`
#
    DIR_SRC=`find ${WRK_DIRS} -maxdepth 1 ${FND_SRC}`
#
    if [ "${EXT}" == "comp" -o "${EXT}" == "frag" -o "${EXT}" == "geom" -o "${EXT}" == "shdr" -o "${EXT}" == "tesc" -o "${EXT}" == "tese" -o "${EXT}" == "vert" ]; then
	    DIR_OBJ=`awk -F '.' '{ printf("%s", $1); for (i = 2; i <= NF; ++i) { printf(".%s", $i); } printf(".H"); }' <<< "${DIR_SRC}"`
    else
	    DIR_OBJ=`awk -F '.' '{ printf("%s", $1); for (i = 2; i < NF; ++i) { printf(".%s", $i); } printf(".o"); }' <<< "${DIR_SRC}"`
    fi
#
#   Find USE dependencies, strip repeat dependencies, and format the
#   resultant string.
#
    USE_SRCS=""
    USES=`grep -i "^[ \t]*use " ${DIR_SRC} | awk '{ sub(",","",$2); printf("%s ", $2); }' | sed -e 's/ISO_FORTRAN_ENV //g' | sed -e 's/ISO_C_BINDING //g' | sed -e 's/OMP_LIB //g' | sed -e 's/OMP_LIB_KINDS //g' | tr -d $'\r'`
    if [ "${USES}" != "" ]; then
      for USE in ${USES[@]}; do
        USE_DIR=`grep -rl -m 1 "^[ \t]*MODULE *${USE}\b[ \t]*" ${ROOT_DIR} --include="*.[fF]" --exclude-dir=".svn" | awk -F '/' '{ if (NF > 1) { printf("%s", $1); for (i = 2; i < NF; ++i) { printf("/%s", $i); } } else { print "."; } }'`
        if [ -d ${USE_DIR} ]; then
          if [ `cd ${USE_DIR}; pwd` == `cd ${MAKE_DIR}; pwd` ]; then
            USE_SRCS="${MAKE_DIR}/`awk '{ printf("%s.mod", tolower($1)); }' <<< "${USE}"` ${USE_SRCS}"
          else
            USE_SRCS="${USE_DIR}/`awk '{ printf("%s.mod", tolower($1)); }' <<< "${USE}"` ${USE_SRCS}"
          fi
        else
          echo
          if [ "${COLOR}" != "on" ]; then
            echo -n "fake" 1>&2
          else
            echo -n -e "${ERROR_COLOR}fake${ECHO_DEFAULT_COLOR}" 1>&2
          fi
          echo ": MODULE ${USE} defined in multiple files."
          rm -f ${MAKE_DIR}/Makefile

          exit 2
        fi
      done
      USE_SRCS=${USE_SRCS/% }
    fi
#
#   Find INCLUDE dependencies, strip repeat dependencies, and format the
#   resultant string.
#
    INCS=`grep -i "^[ \t]*include " ${DIR_SRC} | awk '{ sub("'"'"'","",$2); sub("'"'"'","",$2); printf("%s ", tolower($2)) }'`
    if [ "${INCS}" != "" ]; then
      INCS=`awk '{ for (i = 1; i <= NF; ++i) { k = 0; for (j = 1; j < i; j++) { if ($i == $j) { k = 1; } } if (k == 0) { printf("%s ", $i); } } }' <<< "${INCS}"`
      INCS=${INCS/% }
    fi
#
    if [ "${EXT}" == "c" -o "${EXT}" == "C" -o "${EXT}" == "cpp" -o "${EXT}" == "cxx" -o "${EXT}" == "c++" ]; then
#
#     If the source file is a C/C++ file then find C/C++ #include
#     dependencies, strip repeat dependencies, and format the resultant
#     string.
#
      CINCS=`grep -i "#include[ ]*\"" ${DIR_SRC} | awk -F '"' '{ printf("%s ", $2) }'`
      if [ "${CINCS}" != "" ]; then
        CINCS=`awk '{ for (i = 1; i <= NF; ++i) { k = 0; for (j = 1; j < i; j++) { if ($i == $j) { k = 1; } } if (k == 0) { printf("%s ", $i); } } }' <<< "${CINCS}"`
        CINCS=${CINCS/% }
      fi
    fi
#
#   Find MODULE declarations and format the resultant string.
#
    MODS=`grep -i "^[ \t]*module " ${DIR_SRC} | grep -iv "procedure" | awk '{ printf("%s ", tolower($2)) }' | tr -d $'\r'`
    if [ "${MODS}" != "" ]; then
      MODS=`awk '{ for (i = 1; i < NF; ++i) { printf("%s.mod ", $i); } printf("%s.mod", $NF); }' <<< "${MODS}"`
    fi
#
    PHONY_MODS="${PHONY_MODS} ${MODS}"
#
    LINE=""
    LINE="${DIR_OBJ}: ${DIR_SRC}"
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    if [ "${EXT}" == "f" -o "${EXT}" == "f90" -o "${EXT}" == "f95" -o "${EXT}" == "f03" -o "${EXT}" == "F" -o "${EXT}" == "F90" ]; then
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      if [ "${USE_SRCS}" != "" ]; then
        LINE="${LINE} ${USE_SRCS}"
      fi
      if [ "${INCS}" != "" ]; then
        LINE="${LINE} ${INCS}"
      fi
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    elif [ "${EXT}" == "c" -o "${EXT}" == "C" -o "${EXT}" == "cpp" -o "${EXT}" == "cxx" -o "${EXT}" == "c++" ]; then
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      if [ "${CINCS}" != "" ]; then
        LINE="${LINE} ${CINCS}"
      fi
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    fi
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    echo "${LINE}" >> ${MAKE_DIR}/Makefile
#
#   If MODULE declarations exist and the source file is a Fortran file
#   then add the MODULE declarations to the Makefile hierarchy and have
#   amac.bash perform compilation.
#
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    if [ "${MODS}" != "" ] && [ "${EXT}" == "f" -o "${EXT}" == "f90" -o "${EXT}" == "f95" -o "${EXT}" == "f03" -o "${EXT}" == "F" -o "${EXT}" == "F90" ]; then
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      echo "	@ \$(BASH_DIR)/amac.bash ${FC} \"${FFLAGS}\" ${DIR_SRC} \"${MODS}\"" >> ${MAKE_DIR}/Makefile
#
      MOD_DIR="`awk -F '/' '{ if (NF > 1) { printf("%s", $1); for (i = 2; i < NF; ++i) { printf("/%s", $i); } } else { print "."; } }' <<< "${DIR_SRC}"`"
      NMOD="${MODS}"
      while [ "${NMOD}" != "" ]; do
        MOD="`awk '{ print $NF }' <<< "${NMOD}"`"
        LINE="${MOD_DIR}/${MOD}: ${DIR_OBJ}"
        if [ "${INCS}" != "" ]; then
          LINE="${LINE} ${INCS}"
        fi
        echo "${LINE}" >> ${MAKE_DIR}/Makefile
#
        NMOD=`awk '{ for (i = 1; i < NF; ++i) { printf("%s ", $i); } }' <<< "${NMOD}"`
      done
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    elif [ "${EXT}" == "f" -o "${EXT}" == "f90" -o "${EXT}" == "f95" -o "${EXT}" == "f03" -o "${EXT}" == "F" -o "${EXT}" == "F90" ]; then
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      echo "	@ \$(BASH_DIR)/ac.bash ${FC} \"${FFLAGS}\" ${DIR_SRC}" >> ${MAKE_DIR}/Makefile
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    elif [ "${EXT}" == "c" -o "${EXT}" == "C" -o "${EXT}" == "cpp" -o "${EXT}" == "cxx" -o "${EXT}" == "c++" ]; then
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      echo "	@ \$(BASH_DIR)/ac.bash ${CC} \"${CFLAGS}\" ${DIR_SRC}" >> ${MAKE_DIR}/Makefile
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    elif [ "${EXT}" == "comp" -o "${EXT}" == "frag" -o "${EXT}" == "geom" -o "${EXT}" == "shdr" -o "${EXT}" == "tesc" -o "${EXT}" == "tese" -o "${EXT}" == "vert" ]; then
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
      echo "	\$(BASH_DIR)/sc.bash ${DIR_SRC}" >> ${MAKE_DIR}/Makefile
#
      CLN_HDR="${CLN_HDR} ${DIR_SRC}.H"
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
    fi
# -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
#
    echo >> ${MAKE_DIR}/Makefile
#
    if [ "${VER}" == "y" ]; then
      DEL=`sed -e 's/./\\\b/g' <<< "${NSRC} source files to the Makefile..."`
      (( NSRC = NSRC + 1 ))
      echo -en "${DEL}${NSRC} source files to the Makefile..."
    fi
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  done
#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#
  if [ "${VER}" == "y" ]; then
    echo -e "\b\b  "
  fi
#
  PHONY_MODS=${PHONY_MODS/# }
  PHONY_MODS=${PHONY_MODS/% }
  PHONY_MODS=`tr -d $'\r' <<< ${PHONY_MODS}`
#
  echo >> ${MAKE_DIR}/Makefile
  echo >> ${MAKE_DIR}/Makefile
  echo ".PHONY: clean gcov gcov-verbose ${PHONY_MODS}" >> ${MAKE_DIR}/Makefile
  echo >> ${MAKE_DIR}/Makefile
#
# Create clean-up routine.
#
  echo "clean:" >> ${MAKE_DIR}/Makefile
  LINE="	find ${WRK_DIRS} -maxdepth 1 \( -name \"*.o\" -o -name \"*.mod\" -o -name \"*.gcda\" -o -name \"*.gcno\" \) -exec rm -f '{}' +"
  if [ "${CLN_HDR}" != "" ]; then
    echo "${LINE}; rm -f${CLN_HDR}" >> ${MAKE_DIR}/Makefile
  else
    echo "${LINE}" >> ${MAKE_DIR}/Makefile
  fi
  echo >> ${MAKE_DIR}/Makefile
#
# Create routines to collect gcov files into the make directory.
#
  echo "gcov:" >> ${MAKE_DIR}/Makefile
  echo "	find ${WRK_DIRS} -maxdepth 1 \( -name \"*.gcda\" -o -name \"*.gcno\" \) -exec mv -f '{}' ${MAKE_DIR} 2>/dev/null \;" >> ${MAKE_DIR}/Makefile
  echo >> ${MAKE_DIR}/Makefile
  echo "gcov-verbose:" >> ${MAKE_DIR}/Makefile
  echo "	find ${WRK_DIRS} -maxdepth 1 \( -name \"*.gcda\" -o -name \"*.gcno\" \) -exec mv -f '{}' ${MAKE_DIR} \;" >> ${MAKE_DIR}/Makefile
#
# Check for non-Linux environments.
#
  KNAME=`uname -s`
#
# Modify Makefile if being built in Windows under Cygwin.
#
  grep -iq "Cygwin" <<< "${KNAME}"
  if [ $? == 0 ]; then
#
#   Make the Invocation of the Bash Shell Explicit
#
    sed -i -e 's/@ \(.*\)mac\.bash/@ bash \1amac.bash/' ${MAKE_DIR}/Makefile
#
#   Add Windows Specific Linking Flags
#
    sed -i -e 's/-o \(.*\)\.x/-mconsole -mwindows -o \1.exe/' ${MAKE_DIR}/Makefile
#
#   Exclude Non-Windows Linking Flags
#
    sed -i -e 's/-lXft //' ${MAKE_DIR}/Makefile
  fi
#
# Modify Makefile if being built in Windows under MinGW.
#
  grep -iq "MinGW\|MSYS" <<< "${KNAME}"
  if [ $? == 0 ]; then
#
#   Add Windows Specific Compilation Flags
#
    sed -i -e 's/-I\. /-I. -I\/usr\/local\/include\/ /' ${MAKE_DIR}/Makefile
#
#   Add Windows Specific Linking Flags
#
    sed -i -e 's/-o \(.*\)\.x/-mconsole -mwindows -o \1.exe/' ${MAKE_DIR}/Makefile
#
    sed -i -e 's/-lGLU /-lglu32 /' ${MAKE_DIR}/Makefile
    sed -i -e 's/-lfltk /-L\/usr\/local\/lib\/ -lfltk -lole32 -luuid -lcomctl32 /' ${MAKE_DIR}/Makefile
    sed -i -e 's/-lfltk_gl/-lfltk_gl -lopengl32/' ${MAKE_DIR}/Makefile
#
#   Exclude Non-Windows Linking Flags
#
    sed -i -e 's/-lXft //' ${MAKE_DIR}/Makefile
  fi
#
  sed -i -e 's/\([^\.]\)\.\//\1$(PWD)\//g' ${MAKE_DIR}/Makefile
  sed -i -e 's/^\.\//$(PWD)\//g' ${MAKE_DIR}/Makefile
#
  echo "fake: Makefile generated."
#
  if [ "${FAKE_NOTIFY}" == "on" ]; then
    type notify-send &>/dev/null && notify-send "fake" "Makefile generated"
#
    type osascript &>/dev/null && osascript -e "display notification \"Makefile Generated\" with title \"fake\""
  fi
